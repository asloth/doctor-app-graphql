
scalar Time

type UserType {
  id: ID!
  name: String!
  createdAt: Time!
  updatedAt: Time!
  users: [User!]!
}

type User {
  id: ID!
  name: String!
  password: String!
  userType: UserType!
  patients: Patient
  doctors: Doctor
}

type IdentificationDocument{
  id: ID!
  name: String!
  patients: [Patient!]!
}

type ClinicHistory{
  id: ID!
  name: String!
  documentUrl: String!
  patient: Patient!
}

type Patient {
  id: ID!
  documentId: String!
  name: String!
  lastname: String!
  email: String!
  phoneNumber: String
  sisId: String
  genre: String!
  birthDate: Time!
  address: String!
  district: String!
  region: String!
  identificationDocument: IdentificationDocument!
  user: User!
  clinicHistory: ClinicHistory
  documentIdUrl: String!
  attentions: [Attention!]!
}

type Doctor {
  id: ID!
  name: String!
  lastname: String!
  documentId: String!
  specialty: String!
  collegeNumber: String!
  email: String!
  user: User
  schedule: [DoctorSchedule!]!
  attentions: [Attention!]!
}

type DoctorSchedule{
  id: ID!
  initDate: Time!
  endDate: Time!
  starHour: Int!
  endHour: Int!
  doctor: Doctor!
}

type MedicalCenter {
  id: ID!
  name: String! 
  address: String!
  openHour: Int!
  closeHour: Int!
  attentions: [Attention!]!
}

type Attention {
  id: ID!
  date: Time!
  patient: Patient!
  doctor: Doctor!
  medicalCenter: MedicalCenter!
}

input NewUserType {
  name: String!
}

type Query {
  listUserTypes: [UserType!]!
}


type Mutation {
  createUserType(input: NewUserType!): UserType
  updateUserType(id:ID!, input:NewUserType! ): UserType
  deleteUserType(id: ID!): UserType
}
